C     ==============================================================
      SUBROUTINE VARP2 (S,L,LMAX,NL,N,NMAX,NDIM,LPPS1,LPS,PP2,IV,T,
     X Y,W,ADA,A,B,IPRINT,ITMAX,GC,THREAD,SSTORE,ALF,BETA,IERR,R,GN,
     X ALFBEST)
C     ==============================================================
C
C        GIVEN S SETS OF N OBSERVATIONS EACH, Y(1,1), ..., Y(N,S), OF A
C        DEPENDENT VARIABLE Y, WHERE Y(I,J) CORRESPONDS TO THE IV
C        INDEPENDENT VARIABLE(S) T(I,1), T(I,2), ..., T(I,IV), VARP2
C        ATTEMPTS TO COMPUTE A WEIGHTED LEAST SQUARES FIT TO A FUNCTION
C        ETA (THE 'MODEL') WHICH IS A LINEAR COMBINATION
C
C                             L
C        ETA (ALF,BETA; T) = SUM BETA   * PHI (ALF;T) + PHI   (ALF;T)
C           K                J=1     J,K     J             L+1
C
C        OF NONLINEAR FUNCTIONS PHI(J) (E.G., A SUM OF EXPONENTIALS AND/
C        OR GAUSSIANS).  THAT IS, DETERMINE THE LINEAR PARAMETERS
C        BETA(J,K) FOR J=1,2,...,L, K=1,2,...,S, AND THE VECTOR OF
C        NONLINEAR PARAMETERS ALF BY MINIMIZING THE FROBENIUS NORM OF
C        THE MATRIX OF RESIDUALS:
C
C                         2     S    N                             2
C           NORM(RESIDUAL)  =  SUM  SUM W *(Y   -ETA (ALF,BETA;T )) .
C                              K=1  I=1  I   I,K    K           I
C
C        THE (L+1)-ST TERM IS OPTIONAL, AND IS USED WHEN IT IS DESIRED
C        TO FIX ONE OR MORE OF THE BETA'S (RATHER THAN LET THEM BE
C        DETERMINED).  VARP2 REQUIRES FIRST DERIVATIVES OF THE PHI'S.
C
C                                NOTES:
C
C        A) FOR S=1, THE PROBLEM IS A NONLINEAR LEAST SQUARES PROBLEM
C        OF THE TYPE HANDLED IN REFERENCE 1.  THE CASE WITH S>1 SOLVES
C        A SIMILAR PROBLEM WHITH MULTIPLE RIGHT HAND SIDES, EACH ALLOWED
C        TO HAVE DIFFERENT LINEAR COEFFICIENTS, BUT CONSTRAINED TO HAVE
C        THE SAME NONLINEAR PARAMETERS. SEE REFERENCE 8.
C
C        B)  THE ORIGINAL PROGRAM VARPRO (OF WHICH THIS IS A MODIFI-
C        CATION) IS AVAILABLE FOR THE SPECIAL CASE S=1.  FOR THAT CASE
C        VARPRO IS EASIER TO USE AND HAS THE ADDED ADVANTAGE THAT IT
C        RETURNS THE COVARIANCE MATRIX OF THE PARAMETERS AND THE ESTI-
C        MATED VARIANCE OF THE OBSERVATIONS.
C
C        C) AN ETA OF THE ABOVE FORM IS CALLED 'SEPARABLE'.  THE
C        CASE OF A NONSEPARABLE ETA CAN BE HANDLED BY SETTING L = 0
C        AND USING PHI(L+1).
C
C        D) VARP2 MAY ALSO BE USED TO SOLVE LINEAR LEAST SQUARES
C        PROBLEMS (IN THAT CASE NO ITERATIONS ARE PERFORMED).  SET
C        NL = 0.
C
C        E)  THE MAIN ADVANTAGE OF VARP2 OVER OTHER LEAST SQUARES
C        PROGRAMS IS THAT NO INITIAL GUESSES ARE NEEDED FOR THE LINEAR
C        PARAMETERS.  NOT ONLY DOES THIS MAKE IT EASIER TO USE, BUT IT
C        OFTEN LEADS TO FASTER CONVERGENCE.
C
C
C     DESCRIPTION OF PARAMETERS
C
C        S       NUMBER OF RIGHT HAND SIDES.
C        L       NUMBER OF LINEAR PARAMETERS BETA FOR EACH RIGHT
C                SIDE (MUST BE .GE. 0).
C        LMAX    THE DECLARED ROW DIMENSION OF THE MATRIX BETA.
C        NL      NUMBER OF NONLINEAR PARAMETERS ALF (MUST BE .GE. 0).
C        N       NUMBER OF OBSERVATIONS FOR EACH RIGHT HAND SIDE.
C                S*N MUST BE GREATER THAN S*L + NL
C                (I.E., THE NUMBER OF OBSERVATIONS MUST EXCEED THE
C                NUMBER OF PARAMETERS).
C        IV      NUMBER OF INDEPENDENT VARIABLES T.
C        T       REAL N BY IV MATRIX OF INDEPENDENT VARIABLES.  T(I, J)
C                CONTAINS THE VALUE OF THE I-TH OBSERVATION OF THE J-TH
C                INDEPENDENT VARIABLE.
C        Y       N BY S MATRIX OF OBSERVATIONS CORRESPONDING TO THE S
C                RIGHT HAND SIDES, EACH OF WHICH HAS N VALUES, ONE
C                FOR EACH ROW OF T.
C        W       N-VECTOR OF NONNEGATIVE WEIGHTS.  W(I) IS THE WEIGHT
C                OF THE I'TH OBSERVATION FOR ALL OF THE S RIGHT HAND
C                SIDES.  THERE IS CURRENTLY NO PROVISION FOR GIVING
C                DIFFERENT WEIGHTS FOR EACH RHS.  W SHOULD BE SET TO
C                1'S IF WEIGHTS ARE NOT DESIRED.  IF VARIANCES OF THE
C                INDIVIDUAL OBSERVATIONS ARE KNOWN, W(I) SHOULD BE SET
C                TO 1./VARIANCE(I).
C        INC     NL X (L+1) INTEGER INCIDENCE MATRIX.  INC(K, J) = 1 IF
C                NON-LINEAR PARAMETER ALF(K) APPEARS IN THE J-TH
C                FUNCTION PHI(J).  (THE PROGRAM SETS ALL OTHER INC(K, J)
C                TO ZERO.)  IF PHI(L+1) IS INCLUDED IN THE MODEL,
C                THE APPROPRIATE ELEMENTS OF THE (L+1)-ST COLUMN SHOULD
C                BE SET TO 1'S.  INC IS NOT NEEDED WHEN L = 0 OR NL = 0.
C                CAUTION:  THE DECLARED ROW DIMENSION OF INC (IN ADA)
C                MUST CURRENTLY BE SET TO 12.  SEE 'RESTRICTIONS' BELOW.
C        NMAX    THE DECLARED ROW DIMENSION OF THE MATRICES Y AND T.
C                IT MUST BE AT LEAST N.
C        NDIM    THE DECLARED ROW DIMENSION OF THE MATRIX A.  IT MUST
C                BE AT LEAST MAX(N, 2*NL+3, S*N - (S-1)*L).
C        LPPS1    L+P+S+1, WHERE P IS THE NUMBER OF ONES IN THE MATRIX
C                INC. THE DECLARED COLUMN DIMENSION OF A MUST BE AT
C                LEAST LPPS1.  (IF L = 0, SET LPPS1 = NL+S+1. IF NL =
C                0, SET LPPS1 = L+S+1.)
C        A       REAL MATRIX OF SIZE NDIM BY LPPS1.
C        IPRINT  INPUT INTEGER CONTROLLING PRINTED OUTPUT.  IF IPRINT IS
C                POSITIVE, THE NONLINEAR PARAMETERS, THE NORM OF THE
C                RESIDUAL, AND THE MARQUARDT PARAMETER WILL BE OUTPUT
C                EVERY IPRINT-TH ITERATION (AND INITIALLY, AND AT THE
C                FINAL ITERATION).  THE LINEAR PARAMETERS WILL BE
C                PRINTED AT THE FINAL ITERATION.  ANY ERROR MESSAGES
C                WILL ALSO BE PRINTED.  (IPRINT = 1 IS RECOMMENDED AT
C                FIRST.) IF IPRINT = 0, ONLY THE FINAL QUANTITIES WILL
C                BE PRINTED, AS WELL AS ANY ERROR MESSAGES.  IF IPRINT =
C                -1, NO PRINTING WILL BE DONE.  THE USER IS THEN
C                RESPONSIBLE FOR CHECKING THE PARAMETER IERR FOR ERRORS.
C        ALF     NL-VECTOR OF ESTIMATES OF NONLINEAR PARAMETERS
C                (INPUT).  ON OUTPUT IT WILL CONTAIN OPTIMAL VALUES OF
C                THE NONLINEAR PARAMETERS.
C        BETA    L BY S MATRIX OF LINEAR PARAMETERS WITH DECLARED
C                ROW DIMENSION LMAX.
C        IERR    INTEGER ERROR FLAG (OUTPUT):
C                .GT. 0 - SUCCESSFUL CONVERGENCE, IERR IS THE NUMBER OF
C                    ITERATIONS TAKEN.
C                -1  TERMINATED FOR TOO MANY ITERATIONS.
C                -2  TERMINATED FOR ILL-CONDITIONING (MARQUARDT
C                    PARAMETER TOO LARGE.)  ALSO SEE IERR = -8 BELOW.
C                -4  INPUT ERROR IN PARAMETER N, L, NL, LPPS1, OR NMAX.
C                -5  INC MATRIX IMPROPERLY SPECIFIED, OR P DISAGREES
C                    WITH LPPS1.
C                -6  A WEIGHT WAS NEGATIVE.
C                -7  'CONSTANT' COLUMN WAS COMPUTED MORE THAN ONCE.
C                -8  CATASTROPHIC FAILURE - A COLUMN OF THE A MATRIX HAS
C                    BECOME ZERO.  SEE 'CONVERGENCE FAILURES' BELOW.
C
C
C     SUBROUTINES REQUIRED
C
C           NINE SUBROUTINES, DPA, ORFAC1, ORFAC2, BACSUB, POSTPR, COV,
C        XNORM, INIT, AND VARERR ARE PROVIDED.  IN ADDITION, THE USER
C        MUST PROVIDE A SUBROUTINE (CORRESPONDING TO THE ARGUMENT ADA)
C        WHICH, GIVEN ALF, WILL EVALUATE THE FUNCTIONS PHI(J) AND THEIR
C        PARTIAL DERIVATIVES D PHI(J)/D ALF(K), AT THE SAMPLE POINTS
C        T(I).  THIS ROUTINE MUST BE DECLARED 'EXTERNAL' IN THE CALLING
C        PROGRAM.  ITS CALLING SEQUENCE IS
C
C        SUBROUTINE ADA (S, L+1, NL, N, NMAX, NDIM, LPPS1, IV, A,
C        INC, T, ALF, ISEL)
C
C           THE USER SHOULD MODIFY THE EXAMPLE SUBROUTINE 'ADA' (GIVEN
C        ELSEWHERE) FOR HIS OWN FUNCTIONS.
C
C           THE VECTOR SAMPLED FUNCTIONS PHI(J) SHOULD BE STORED IN THE
C        FIRST N ROWS AND FIRST L+1 COLUMNS OF THE MATRIX A, I.E.,
C        A(I, J) SHOULD CONTAIN PHI(J, ALF; T(I,1), T(I,2), ...,
C        T(I,IV)), I = 1, ..., N; J = 1, ..., L (OR L+1).  THE (L+1)-ST
C        COLUMN OF A CONTAINS PHI(L+1) IF PHI(L+1) IS IN THE MODEL,
C        OTHERWISE IT IS RESERVED FOR WORKSPACE.  IF S>1, COLUMNS
C        L+2 THROUGH L+S ARE ALSO RESERVED.  THE 'CONSTANT' FUNCTIONS
C        (THESE ARE FUNCTIONS PHI(J) WHICH DO NOT DEPEND UPON ANY
C        NONLINEAR PARAMETERS ALF, E.G., T(I)**J) (IF ANY) MUST APPEAR
C        FIRST, STARTING IN COLUMN 1.  THE COLUMN N-VECTORS OF NONZERO
C        PARTIAL DERIVATIVES D PHI(J) / D ALF(K) SHOULD BE STORED
C        SEQUENTIALLY IN THE MATRIX A IN COLUMNS L+S+1 THROUGH L+S+P.
C        THE ORDER IS
C
C          D PHI(1)  D PHI(2)        D PHI(L)  D PHI(L+1)  D PHI(1)
C          --------, --------, ...,  --------, ----------, --------,
C          D ALF(1)  D ALF(1)        D ALF(1)   D ALF(1)   D ALF(2)
C
C          D PHI(2)       D PHI(L+1)       D PHI(1)        D PHI(L+1)
C          --------, ..., ----------, ..., ---------, ..., ----------,
C          D ALF(2)        D ALF(2)        D ALF(NL)       D ALF(NL)
C
C        OMITTING COLUMNS OF DERIVATIVES WHICH ARE ZERO, AND OMITTING
C        PHI(L+1) COLUMNS IF PHI(L+1) IS NOT IN THE MODEL.  NOTE THAT
C        THE LINEAR PARAMETERS BETA ARE NOT USED IN THE MATRIX A.
C        COLUMN L+P+S+1 IS RESERVED FOR WORKSPACE.
C
C        THE CODING OF ADA SHOULD BE ARRANGED SO THAT:
C
C        ISEL = 1  (WHICH OCCURS THE FIRST TIME ADA IS CALLED) MEANS:
C                  A.  FILL IN THE INCIDENCE MATRIX INC
C                  B.  STORE ANY CONSTANT PHI'S IN A.
C                  C.  COMPUTE NONCONSTANT PHI'S AND PARTIAL DERIVA-
C                      TIVES.
C             = 2  MEANS COMPUTE ONLY THE NONCONSTANT FUNCTIONS PHI
C             = 3  MEANS COMPUTE ONLY THE DERIVATIVES
C
C        (WHEN THE PROBLEM IS LINEAR (NL = 0) ONLY ISEL = 1 IS USED, AND
C        DERIVATIVES ARE NOT NEEDED.)
C
C     RESTRICTIONS
C
C           THE SUBROUTINES DPA, INIT (AND ADA) CONTAIN THE LOCALLY
C        DIMENSIONED MATRIX INC, WHOSE DIMENSIONS ARE CURRENTLY SET FOR
C        MAXIMA OF L+1 = 8, NL = 12.  THEY MUST BE CHANGED FOR LARGER
C        PROBLEMS.  DATA PLACED IN ARRAY A IS OVERWRITTEN ('DESTROYED').
C        DATA PLACED IN ARRAYS T, Y AND INC IS LEFT INTACT.  THE PROGRAM
C        RUNS IN WATFIV, EXCEPT WHEN L = 0 OR NL = 0.
C
C           IT IS ASSUMED THAT THE MATRIX PHI(J, ALF; T(I)) HAS FULL
C        COLUMN RANK.  THIS MEANS THAT THE FIRST L COLUMNS OF THE MATRIX
C        A MUST BE LINEARLY INDEPENDENT.
C
C           OPTIONAL NOTE:  AS WILL BE NOTED FROM THE SAMPLE SUBPROGRAM
C        ADA, THE DERIVATIVES D PHI(J)/D ALF(K) (ISEL = 3) MUST BE
C        COMPUTED INDEPENDENTLY OF THE FUNCTIONS PHI(J) (ISEL = 2),
C        SINCE THE FUNCTION VALUES ARE OVERWRITTEN AFTER ADA IS CALLED
C        WITH ISEL = 2.  THIS IS DONE TO MINIMIZE STORAGE, AT THE POS-
C        SIBLE EXPENSE OF SOME RECOMPUTATION (SINCE THE FUNCTIONS AND
C        DERIVATIVES FREQUENTLY HAVE SOME COMMON SUBEXPRESSIONS).  TO
C        REDUCE THE AMOUNT OF COMPUTATION AT THE EXPENSE OF SOME
C        STORAGE, CREATE A MATRIX B OF DIMENSION NMAX BY L+1 IN ADA, AND
C        AFTER THE COMPUTATION OF THE PHI'S (ISEL = 2), COPY THE VALUES
C        INTO B.  THESE VALUES CAN THEN BE USED TO CALCULATE THE DERIV-
C        ATIVES (ISEL = 3).  (THIS MAKES USE OF THE FACT THAT WHEN A
C        CALL TO ADA WITH ISEL = 3 FOLLOWS A CALL WITH ISEL = 2, THE
C        ALFS ARE THE SAME.)
C
C           TO CONVERT TO OTHER MACHINES, CHANGE THE OUTPUT UNIT IN THE
C        DATA STATEMENTS IN VARP2, DPA, POSTPR, AND VARERR.  THE
C        PROGRAM HAS BEEN CHECKED FOR PORTABILITY BY THE BELL LABS PFORT
C        VERIFIER.  FOR MACHINES WITHOUT DOUBLE PRECISION HARDWARE, IT
C        MAY BE DESIRABLE TO CONVERT TO SINGLE PRECISION.  THIS CAN BE
C        DONE BY CHANGING (A) THE DECLARATIONS 'DOUBLE PRECISION' TO
C        'REAL', (B) THE PATTERN '.D' TO '.E' IN THE 'DATA' STATEMENT IN
C        VARP2, (C) DSIGN, DSQRT AND DABS TO SIGN, SQRT AND ABS,
C        RESPECTIVELY, AND (D) DEXP TO EXP IN THE SAMPLE PROGRAMS ONLY.
C
C     CONVERGENCE FAILURES 
C
C           IF CONVERGENCE FAILURES OCCUR, FIRST CHECK FOR INCORRECT
C        CODING OF THE SUBROUTINE ADA.  CHECK ESPECIALLY THE ACTION OF
C        ISEL, AND THE COMPUTATION OF THE PARTIAL DERIVATIVES.  IF THESE
C        ARE CORRECT, TRY SEVERAL STARTING GUESSES FOR ALF.  IF ADA
C        IS CODED CORRECTLY, AND IF ERROR RETURNS IERR = -2 OR -8
C        PERSISTENTLY OCCUR, THIS IS A SIGN OF ILL-CONDITIONING, WHICH
C        MAY BE CAUSED BY SEVERAL THINGS.  ONE IS POOR SCALING OF THE
C        PARAMETERS; ANOTHER IS AN UNFORTUNATE INITIAL GUESS FOR THE
C        PARAMETERS, STILL ANOTHER IS A POOR CHOICE OF THE MODEL.
C
C     ALGORITHM
C
C           THE RESIDUAL R IS MODIFIED TO INCORPORATE, FOR ANY FIXED
C        ALF, THE OPTIMAL LINEAR PARAMETERS FOR THAT ALF.  IT IS THEN
C        POSSIBLE TO MINIMIZE ONLY ON THE NONLINEAR PARAMETERS.  AFTER
C        THE OPTIMAL VALUES OF THE NONLINEAR PARAMETERS HAVE BEEN DETER-
C        MINED, THE LINEAR PARAMETERS CAN BE RECOVERED BY LINEAR LEAST
C        SQUARES TECHNIQUES (SEE REF. 1).
C
C           THE MINIMIZATION IS BY A MODIFICATION OF OSBORNE'S (REF. 3)
C        MODIFICATION OF THE LEVENBERG-MARQUARDT ALGORITHM.  INSTEAD OFcv 
C        SOLVING THE NORMAL EQUATIONS WITH MATRIX
C
C                 T      2
C               (J J + NU  * D),      WHERE  J = D(ETA)/D(ALF),
C
C        STABLE ORTHOGONAL (HOUSEHOLDER) REFLECTIONS ARE USED ON A
C        MODIFICATION OF THE MATRIX
C                                   (   J  )
C                                   (------) ,
C                                   ( NU*D )
C
C        WHERE D IS A DIAGONAL MATRIX CONSISTING OF THE LENGTHS OF THE
C        COLUMNS OF J.  THIS MARQUARDT STABILIZATION ALLOWS THE ROUTINE
C        TO RECOVER FROM SOME RANK DEFICIENCIES IN THE JACOBIAN.
C        OSBORNE'S EMPIRICAL STRATEGY FOR CHOOSING THE MARQUARDT PARAM-
C        ETER HAS PROVEN REASONABLY SUCCESSFUL IN PRACTICE.  (GAUSS-
C        NEWTON WITH STEP CONTROL CAN BE OBTAINED BY MAKING THE CHANGE
C        INDICATED BEFORE THE INSTRUCTION LABELED 5).  A DESCRIPTION CAN
C        BE FOUND IN REF. (3), AND A FLOW CHART IN (2), P. 22.
C
C        FOR REFERENCE, SEE
C
C        1.  GENE H. GOLUB AND V. PEREYRA, 'THE DIFFERENTIATION OF
C            PSEUDO-INVERSES AND NONLINEAR LEAST SQUARES PROBLEMS WHOSE
C            VARIABLES SEPARATE,' SIAM J. NUMER. ANAL. 10, 413-432
C            (1973).
C        2.  ------, SAME TITLE, STANFORD C.S. REPORT 72-261, FEB. 1972.
C        3.  OSBORNE, MICHAEL R., 'SOME ASPECTS OF NON-LINEAR LEAST
C            SQUARES CALCULATIONS,' IN LOOTSMA, ED., 'NUMERICAL METHODS
C            FOR NON-LINEAR OPTIMIZATION,' ACADEMIC PRESS, LONDON, 1972.
C        4.  KROGH, FRED, 'EFFICIENT IMPLEMENTATION OF A VARIABLE PRO-
C            JECTION ALGORITHM FOR NONLINEAR LEAST SQUARES PROBLEMS,'
C            COMM. ACM 17, PP. 167-169 (MARCH, 1974).
C        5.  KAUFMAN, LINDA, 'A VARIABLE PROJECTION METHOD FOR SOLVING
C            SEPARABLE NONLINEAR LEAST SQUARES PROBLEMS', B.I.T. 15,
C            49-57 (1975).
C        6.  DRAPER, N., AND SMITH, H., APPLIED REGRESSION ANALYSIS,
C            WILEY, N.Y., 1966 (FOR STATISTICAL INFORMATION ONLY).
C        7.  C. LAWSON AND R. HANSON, SOLVING LEAST SQUARES PROBLEMS,
C            PRENTICE-HALL, ENGLEWOOD CLIFFS, N. J., 1974.
C        8.  GOLUB, G. AND LEVEQUE, R., EXTENSIONS AND USES OF THE 
C            VARIABLE PROJECTION ALGORITHM FOR SOLVING NONLINEAR LEAST
C            SQUARES PROBLEMS,  PROC. 1979 ARMY NUM. ANAL. AND COMPUTERS
C            CONF., ARO REPORT 79-3, PP. 1-12.
C
C                      VICTOR PEREYRA
C                      ESCUELA DE COMPUTACION
C                      FACULTAD DE CIENCIAS
C                      UNIVERSIDAD CENTRAL DE VENEZUELA
C                      CARACAS, VENEZUELA
C
C                      JOHN BOLSTAD
C                      COMPUTER SCIENCE DEPT., SERRA HOUSE
C                      STANFORD UNIVERSITY
C                      JANUARY, 1977
C
C                      RANDY LEVEQUE
C                      COMPUTER SCIENCE DEPT., SERRA HOUSE
C                      STANFORD UNIVERSITY
C                      DECEMBER, 1978
C
C     ..................................................................
C
      INTEGER B1, S, PP2, GN, TERMINATE, GC, THREAD, ITMAX
      DOUBLE PRECISION A(N, LPS), B(NDIM, PP2), BETA(LMAX,S), 
     2 ALF(NL), W(N), Y(NMAX,S), ACUM, EPS1, GNSTEP, NU, PRJRES, R, 
     3 RNEW, XNORM, T(NMAX,IV), ALFBEST(NL), R_BEST, DTA
      LOGICAL SKIP
      EXTERNAL ADA
      DATA EPS1 /1.D-6/
C
C           THE FOLLOWING TWO PARAMETERS ARE USED IN THE CONVERGENCE
C           TEST:  EPS1 IS AN ABSOLUTE AND RELATIVE TOLERANCE FOR THE
C           NORM OF THE PROJECTION OF THE RESIDUAL ONTO THE RANGE OF THE
C           JACOBIAN OF THE VARIABLE PROJECTION FUNCTIONAL.
C           ITMAX IS THE MAXIMUM NUMBER OF FUNCTION AND DERIVATIVE
C           EVALUATIONS ALLOWED.  CAUTION:  EPS1 MUST NOT BE
C           SET SMALLER THAN 10 TIMES THE UNIT ROUND-OFF OF THE MACHINE.
C-----------------------------------------------------------------
	  EPS1 = 1.D-6
	  PRJ_TOL = 1.D-3
      R_BEST = 1.D10
	  PRJRES = 0.D0
	  IERR = 1
      ITER = 0
      LP1 = L + 1
      B1 = L + S + 1
      LNLS1 = L + NL + S + 1
      NLP1 = NL + 1
      SKIP = .FALSE.
      MODIT = IPRINT
      RNEW = 0
      IF (IPRINT .LE. 0) MODIT = ITMAX + 2
      NU = 0.
C              IF GAUSS-NEWTON IS DESIRED REMOVE THE NEXT STATEMENT.
      IF (GN .EQ. 1) GO TO 5
      NU = 1.
C
C              BEGIN OUTER ITERATION LOOP TO UPDATE ALF.
C              CALCULATE THE NORM OF THE RESIDUAL AND THE DERIVATIVE OF
C              THE MODIFIED RESIDUAL THE FIRST TIME, BUT ONLY THE
C              DERIVATIVE IN SUBSEQUENT ITERATIONS.
C
    5 CALL DPA (S, L, LMAX, NL, N, NMAX, NDIM, LPPS1, LPS, PP2, IV,
     X T, Y, W, ALF, ADA, IERR, IPRINT, A, B, BETA, A(1, LP1), 
     X R, GC, THREAD, SSTORE)
      GNSTEP = 1.0
      ITERIN = 0
      IF (ITER .GT. 0) GO TO 10
         IF (NL .EQ. 0) GO TO 90
         IF (IERR .NE. 1) GO TO 99
C
         IF (IPRINT .LE. 0) GO TO 10
C        WRITE (OUTPUT, 207) ITERIN, R
C        WRITE (OUTPUT, 200) NU
C                              BEGIN TWO-STAGE ORTHOGONAL FACTORIZATION
   10 LAST_PRJRES = PRJRES
      CALL ORFAC1(S, NLP1, NDIM, N, L, IPRINT, B, PRJRES, IERR)
      IF (IERR .LT. 0) GO TO 99
      IERR = 2
      IF (NU .EQ. 0.) GO TO 30
C
C              BEGIN INNER ITERATION LOOP FOR GENERATING NEW ALF AND
C              TESTING IT FOR ACCEPTANCE.
C
   25    CALL ORFAC2(NLP1, NDIM, NU, B)
C
C              SOLVE A NL X NL UPPER TRIANGULAR SYSTEM FOR DELTA-ALF.
C              THE TRANSFORMED RESIDUAL (IN COL. LNLS1 OF A) IS OVER-
C              WRITTEN BY THE RESULT DELTA-ALF.
C
   30    CALL BACSUB (NDIM, NL, B, B(1, NL + 1))
         DO 35 K = 1, NL
   35       B(K, 1)  = ALF(K) + B(K, NL + 1)
C           NEW ALF(K) = ALF(K) + DELTA ALF(K)
C
C              STEP TO THE NEW POINT NEW ALF, AND COMPUTE THE NEW
C              NORM OF RESIDUAL.  NEW ALF IS STORED IN COLUMN B1 OF A.
C
   40	 CALL DPA (S, L, LMAX, NL, N, NMAX, NDIM, LPPS1, LPS, PP2, IV, 
     X T, Y, W, B, ADA, IERR, IPRINT, A, B, 
     X BETA, A(1, LP1), RNEW, GC, THREAD, SSTORE)
         IF (IERR .NE. 2) GO TO 99
			ITER = ITER + 1
         ITERIN = ITERIN + 1
C        SKIP = MOD(ITER, MODIT) .NE. 0
C        IF (SKIP) GO TO 45
C           WRITE (OUTPUT, 203) ITER
C           WRITE (OUTPUT, 216) (A(K, B1), K = 1, NL)
C           WRITE (OUTPUT, 207) ITERIN, RNEW
            CALL UPDATESTATUS(GC,THREAD,ITER,RNEW/SQRT(S),TERMINATE)
            IF (TERMINATE .EQ. 0) GO TO 45
			   IERR = -9
			   CALL VARERR(IPRINT, IERR, 1)
			   GOTO 95 
C
   45    IF (ITER .LT. ITMAX) GO TO 50
            IERR = -1
            CALL VARERR (IPRINT, IERR, 1)
            GO TO 95
   50    IF (RNEW - R .LT. EPS1*(R + 1.D0)) GO TO 75
C
C              RETRACT THE STEP JUST TAKEN
C
            IF (NU .NE. 0.) GO TO 60
C                                             GAUSS-NEWTON OPTION ONLY
            GNSTEP = 0.5*GNSTEP
            IF (GNSTEP .LT. EPS1) GO TO 95
            DO 55 K = 1, NL
   55          B(K, 1) = ALF(K) + GNSTEP*B(K, NL + 1)
            GO TO 40
C                                        ENLARGE THE MARQUARDT PARAMETER
   60       NU = 1.5*NU
C           IF (.NOT. SKIP) WRITE (OUTPUT, 206) NU
            IF (NU .LE. 100.) GO TO 65
               IERR = -2
               CALL VARERR (IPRINT, IERR, 1)
               GO TO 95
C                                        RETRIEVE UPPER TRIANGULAR FORM
C                                        AND RESIDUAL OF FIRST STAGE.
   65    DO 70 K = 1, NL
            KSUB = LPS + K
            DO 70 J = K, NLP1
               JSUB = LPS + J
               ISUB = NLP1 + J
   70          B(K, J) = B(ISUB, K)
         GO TO 25
C                                        END OF INNER ITERATION LOOP
C           ACCEPT THE STEP JUST TAKEN
C
   75 R = RNEW
      DO 80 K = 1, NL
   80    ALF(K) = B(K, 1)
C
	  IF (RNEW >= R_BEST) GO TO 82
		 R_BEST = RNEW
		 DO 81 K = 1, NL
   81		ALFBEST(K) = ALF(K) 
C
C                                        CALC. NORM(DELTA ALF)/NORM(ALF)
   82 ACUM = GNSTEP*XNORM(NL, B(1, NL + 1))/XNORM(NL, ALF)
C
C           IF ITERIN IS GREATER THAN 1, A STEP WAS RETRACTED DURING
C           THIS OUTER ITERATION.
C
      IF (ITERIN .EQ. 1) NU = 0.5*NU
      IF (SKIP) GO TO 85
C        WRITE (OUTPUT, 200) NU
C        WRITE (OUTPUT, 208) ACUM
   85 IERR = 3
      DTA = (PRJRES-LAST_PRJRES)/LAST_PRJRES
C      IF (PRJRES .GT. EPS1*(R + 1.D0) .AND. DTA .GT. PRJ_TOL) GO TO 5
      IF (PRJRES .GT. EPS1*(R + 1.D0)) GO TO 5
C           END OF OUTER ITERATION LOOP
C
C           CALCULATE FINAL QUANTITIES -- LINEAR PARAMETERS, RESIDUALS,
C
   90 IERR = ITER
   95 IF (NL .GT. 0) CALL DPA (S, L, LMAX, NL, N, NMAX, NDIM, LPPS1, 
     X LPS, PP2, IV, T, Y, W, ALF, ADA, 3, IPRINT, A, B, BETA, 
     X A(1, LP1), R, GC, THREAD, SSTORE) 
      CALL POSTPR(S, L, LMAX, NL, N, NMAX, NDIM, LNLS1, LPS, PP2,  
     X EPS1, R, IPRINT, ALF, W, A, B, A(1, LP1), BETA, IERR)
C
      CALL ADA (S, LP1, NL, N, NMAX, NDIM, LPPS1, PP2, IV, A, B, 
     X INC, T, ALF, 2, GC, THREAD)
   99 RETURN
C
  200 FORMAT (9H     NU =, E15.7)
  203 FORMAT (12H0  ITERATION, I4, 24H    NONLINEAR PARAMETERS)
  206 FORMAT (25H     STEP RETRACTED, NU =, E15.7)
  207 FORMAT (1H0, I5, 20H  NORM OF RESIDUAL =, E15.7)
  208 FORMAT (34H     NORM(DELTA-ALF) / NORM(ALF) =, E12.3)
  216 FORMAT (1H0, 7E15.7)
      END
C
C     ==============================================================
      SUBROUTINE ORFAC1(S, NLP1, NDIM, N, L, IPRINT, B, PRJRES, IERR)
C     ==============================================================
C
C            STAGE 1:  HOUSEHOLDER REDUCTION OF
C
C                   (    .    )      ( DR'. R3 )    NL
C                   ( DR . R2 )  TO  (----. -- ),
C                   (    .    )      (  0 . R4 )  N-L-NL
C
C                     NL    1          NL   1
C
C         WHERE DR = -D(Q2)*Y IS THE DERIVATIVE OF THE MODIFIED RESIDUAL
C         PRODUCED BY DPA, R2 IS THE TRANSFORMED RESIDUAL FROM DPA, AND
C         DR' IS IN UPPER TRIANGULAR FORM (AS IN REF. (2), P. 18).
C         DR IS STORED IN ROWS L+1 TO N*S-L*(S-1) AND COLUMNS L+S+1 TO
C         L+S+NL OF THE MATRIX A (I.E., COLUMNS 1 TO NL OF THE MATRIX B).
C         R2 IS STORED IN COLUMN L+NL+S+1 OF THE MATRIX A (COLUMN NL + 1
C         OF B).  FOR K = 1, 2, ..., NL, FIND REFLECTION I - U * U' /
C         BETA WHICH ZEROES B(I, K), I = L+K+1, ..., N*S - L*(S-1).
C
C     ..................................................................
C
      INTEGER S
      DOUBLE PRECISION ACUM, ALPHA, B(NDIM, NLP1), BETA, DSIGN, PRJRES,
     X U, XNORM
C
      NL = NLP1 - 1
      NSLS1 = N*S - L*(S-1)
      NL23 = 2*NL + 3
      LP1 = L + 1
C
      DO 30 K = 1, NL
         LPK = L + K
         ALPHA = DSIGN(XNORM(NSLS1+1-LPK, B(LPK, K)), B(LPK, K))
         U = B(LPK, K) + ALPHA
         B(LPK, K) = U
         BETA = ALPHA * U
         IF (ALPHA .NE. 0.0) GO TO 13
C                                                   COLUMN WAS ZERO
         IERR = -8
         CALL VARERR (IPRINT, IERR, LP1 + K)
         GO TO 99
C                                APPLY REFLECTIONS TO REMAINING COLUMNS
C                                OF B AND TO RESIDUAL VECTOR.
   13    KP1 = K + 1
         DO 25 J = KP1, NLP1
            ACUM = 0.0
            DO 20 I = LPK, NSLS1
   20          ACUM = ACUM + B(I, K) * B(I, J)
            ACUM = ACUM / BETA
            DO 25 I = LPK, NSLS1
   25          B(I, J) = B(I, J) - B(I, K) * ACUM
   30    B(LPK, K) = -ALPHA
C
      PRJRES = XNORM(NL, B(LP1, NLP1))
C
C           SAVE UPPER TRIANGULAR FORM AND TRANSFORMED RESIDUAL, FOR USE
C           IN CASE A STEP IS RETRACTED.  ALSO COMPUTE COLUMN LENGTHS.
C
      IF (IERR .EQ. 4) GO TO 99
      DO 50 K = 1, NL
         LPK = L + K
         DO 40 J = K, NLP1
            JSUB = NLP1 + J
            B(K, J) = B(LPK, J)
   40       B(JSUB, K) = B(LPK, J)
   50    B(NL23, K) = XNORM(K, B(LP1, K))
C
   99 RETURN
      END
C
C     ==============================================================
      SUBROUTINE ORFAC2(NLP1, NDIM, NU, B)
C     ==============================================================
C
C        STAGE 2:  SPECIAL HOUSEHOLDER REDUCTION OF
C
C                      NL     ( DR' . R3 )      (DR'' . R5 )
C                             (-----. -- )      (-----. -- )
C                  N-L-NL     (  0  . R4 )  TO  (  0  . R4 )
C                             (-----. -- )      (-----. -- )
C                      NL     (NU*D . 0  )      (  0  . R6 )
C
C                                NL    1          NL    1
C
C        WHERE DR', R3, AND R4 ARE AS IN ORFAC1, NU IS THE MARQUARDT
C        PARAMETER, D IS A DIAGONAL MATRIX CONSISTING OF THE LENGTHS OF
C        THE COLUMNS OF DR', AND DR'' IS IN UPPER TRIANGULAR FORM.
C        DETAILS IN (1), PP. 423-424.  NOTE THAT THE (N-L-NL) BAND OF
C        ZEROES, AND R4, ARE OMITTED IN STORAGE.
C
C     ..................................................................
C
      DOUBLE PRECISION ACUM, ALPHA, B(NDIM, NLP1), BETA, DSIGN, NU, U,
     X XNORM
C
      NL = NLP1 - 1
      NL2 = 2*NL
      NL23 = NL2 + 3
      DO 30 K = 1, NL
         KP1 = K + 1
         NLPK = NL + K
         NLPKM1 = NLPK - 1
         B(NLPK, K) = NU * B(NL23, K)
         B(NL, K) = B(K, K)
         ALPHA = DSIGN(XNORM(K+1, B(NL, K)), B(K, K))
         U = B(K, K) + ALPHA
         BETA = ALPHA * U
         B(K, K) = -ALPHA
C                        THE K-TH REFLECTION MODIFIES ONLY ROWS K,
C                        NL+1, NL+2, ..., NL+K, AND COLUMNS K TO NL+1.
         DO 30 J = KP1, NLP1
            B(NLPK, J) = 0.
            ACUM = U * B(K,J)
            DO 20 I = NLP1, NLPKM1
   20          ACUM = ACUM + B(I,K) * B(I,J)
            ACUM = ACUM / BETA
            B(K,J) = B(K,J) - U * ACUM
            DO 30 I = NLP1, NLPK
   30          B(I,J) = B(I,J) - B(I,K) * ACUM
C
      RETURN
      END
C
C     ==============================================================
      SUBROUTINE INIT(S, L, LMAX, NL, N, NMAX, NDIM, LPPS1, LPS,  
     X PP2, IV, T, W, ALF, ADA, ISEL, IPRINT, A, B, INC, NCON, 
     X NCONP1, PHILP1, NOWATE, GC, THREAD)
C     ==============================================================
C
C        CHECK VALIDITY OF INPUT PARAMETERS, AND DETERMINE NUMBER OF
C        CONSTANT FUNCTIONS.
C
C     ..................................................................
C
      DOUBLE PRECISION A(N, LPS), B(NDIM, PP2), ALF(NL), T(NMAX, IV), 
     X W(N), DSQRT
      INTEGER P, INC(12, 8), S, PP2, GC, THREAD
      INTEGER NCON_BUF, NCONP1_BUF
      LOGICAL NOWATE, PHILP1
C
      LP1 = L + 1
      LNLS1 = L + S + NL + 1
	  NCONP1_BUF = 0
C                                          CHECK FOR VALID INPUT
      IF (L .GE. 0 .AND. NL .GE. 0 .AND. S*L+NL .LT. S*N .AND. LNLS1.LE.
     X LPPS1 .AND. 2*NL + 3 .LE. NDIM .AND. N .LE. NMAX .AND. N .LE.
     X NDIM .AND. IV .GT. 0 .AND. .NOT. (NL .EQ. 0 .AND. L .EQ. 0) .AND.
     X S*N-(S-1)*L .LE. NDIM .AND. S .GT. 0 .AND. L .LE. LMAX) GO TO 3
         ISEL = -4
         CALL VARERR (IPRINT, ISEL, 1)
         GO TO 99
C
C    1 IF (L .EQ. 0 .OR. NL .EQ. 0) GO TO 3
C         DO 2 J = 1, LP1
C            DO 2 K = 1, NL
C    2          INC(K, J) = 0
C
    3 CALL ADA (S, LP1, NL, N, NMAX, NDIM, LPPS1, PP2, IV, A, B,  
     X INC, T, ALF, ISEL, GC, THREAD)
C
C     NOWATE = .TRUE.
      NOWATE = .FALSE.
      DO 9 I = 1, N
C        NOWATE = NOWATE .AND. (W(I) .EQ. 1.0)
         IF (W(I) .GE. 0.) GO TO 9
C                                                ERROR IN WEIGHTS
         ISEL = -6
         CALL VARERR (IPRINT, ISEL, I)
         GO TO 99
    9    W(I) = DSQRT(W(I))
C
      NCONP1_BUF = LP1
      NCON_BUF = L
      PHILP1 = L .EQ. 0
C     PHILP1 = .TRUE.
      IF (L .EQ. 0 .OR. NL .EQ. 0) GO TO 99
C                                   CHECK INC MATRIX FOR VALID INPUT AND
C                                   DETERMINE NUMBER OF CONSTANT FCNS.
      P = 0
      DO 11 J = 1, LP1
         IF (P .EQ. 0) NCONP1_BUF = J
         DO 11 K = 1, NL
            INCKJ = INC(K, J)
            IF (INCKJ .NE. 0 .AND. INCKJ .NE. 1) GO TO 15
            IF (INCKJ .EQ. 1) P = P + 1
   11       CONTINUE
C
C     IF (IPRINT .GE. 0) WRITE (OUTPUT, 210) NCON
      IF (L+P+S+1 .EQ. LPPS1) GO TO 20
C                                              INPUT ERROR IN INC MATRIX
   15 ISEL = -5
      CALL VARERR (IPRINT, ISEL, 1)
      GO TO 99
C                                 DETERMINE IF PHI(L+1) IS IN THE MODEL.
   20 DO 25 K = 1, NL
   25    IF (INC(K, LP1) .EQ. 1) PHILP1 = .TRUE.
C
   99 NCON_BUF = NCONP1_BUF - 1
      NCON = NCON_BUF
      NCONP1 = NCONP1_BUF
      RETURN
  210 FORMAT (33H0  NUMBER OF CONSTANT FUNCTIONS =, I4 /)
      END
C     ==============================================================
      SUBROUTINE BACSUB (NDIM, N, A, X)
C     ==============================================================
C
C        BACKSOLVE THE N X N UPPER TRIANGULAR SYSTEM A*X = B.
C        THE SOLUTION X OVERWRITES THE RIGHT SIDE B.
C
      DOUBLE PRECISION A(NDIM, N), X(N), ACUM
C
      X(N) = X(N) / A(N, N)
      IF (N .EQ. 1) GO TO 30
      NP1 = N + 1
      DO 20 IBACK = 2, N
         I = NP1 - IBACK
C           I = N-1, N-2, ..., 2, 1
         IP1 = I + 1
         ACUM = X(I)
         DO 10 J = IP1, N
   10       ACUM = ACUM - A(I,J)*X(J)
   20    X(I) = ACUM / A(I,I)
C
   30 RETURN
      END
C     ==============================================================
      SUBROUTINE POSTPR(S, L, LMAX, NL, N, NMAX, NDIM, LNLS1, LPS, 
     X PP2, EPS, RNORM, IPRINT, ALF, W, A, B, R, U, IERR)
C     ==============================================================
C
C        CALCULATE RESIDUALS.
C        ON INPUT, U CONTAINS INFORMATION ABOUT HOUSEHOLDER REFLECTIONS
C        FROM DPA.  ON OUTPUT, IT CONTAINS THE LINEAR PARAMETERS.
C
      INTEGER S, PP2
      DOUBLE PRECISION A(N, LPS), B(NDIM, PP2), ALF(NL), R(N,S), 
     X U(LMAX,S), W(N), ACUM, EPS, RNORM
C
      LP1 = L + 1
      LPNL = LNLS1 - 2
      LNL1 = LPNL + 1
      DO 10 I = 1, N
   10    W(I) = W(I)**2
C
C              UNWIND HOUSEHOLDER TRANSFORMATIONS TO GET RESIDUALS,
C              AND MOVE THE LINEAR PARAMETERS FROM R TO U.
C
      IF (L .EQ. 0) GO TO 30
      USAVE = 2
      DO 19 I=1,L
   19    B(I,USAVE) = U(I,1)
      DO 25 IS=1,S
         DO 25 KBACK = 1, L
            K = LP1 - KBACK
            KP1 = K + 1
            ACUM = 0.
            DO 20 I = KP1, N
   20          ACUM = ACUM + A(I, K) * R(I,IS)
            U(K,IS) = R(K,IS)
            R(K,IS) =  ACUM / A(K, K)
            ACUM = -ACUM / (A(K,USAVE) * A(K, K))
            DO 25 I = KP1, N
   25          R(I,IS) = R(I,IS) - A(I, K)*ACUM
C
   30 CONTINUE
C  30 IF (IPRINT .LT. 0) GO TO 99
C     WRITE (OUTPUT, 209)
C     IF (L .EQ. 0) GO TO 50
C        WRITE(OUTPUT,210)
C        DO 40 I=1,L
C  40      WRITE(OUTPUT,212) (U(I,J), J=1,S)
C  40	   CONTINUE
C  50 IF (NL .GT. 0) WRITE (OUTPUT, 211) (ALF(K), K = 1, NL)
C     WRITE(OUTPUT,214) RNORM
C     WRITE (OUTPUT, 209)
   99 RETURN
C
  209 FORMAT (1H0, 50(1H'))
  210 FORMAT (20H0  LINEAR PARAMETERS /)
  211 FORMAT (/ 23H0  NONLINEAR PARAMETERS // (7E15.7))
  212 FORMAT (7E15.7)
  214 FORMAT (/ 21H0  NORM OF RESIDUAL =, E15.7)
      END
C     ==============================================================
      SUBROUTINE VARERR (IPRINT, IERR, K)
C     ==============================================================
C
C        PRINT ERROR MESSAGES
C
C      INTEGER ERRNO, OUTPUT
C      DATA OUTPUT /6/
C
C      IF (IPRINT .LT. 0) GO TO 99
C      ERRNO = IABS(IERR)
C     GO TO (1, 2, 99, 4, 5, 6, 7, 8), ERRNO
C
C   1 WRITE (OUTPUT, 101)
C     GO TO 99
C   2 WRITE (OUTPUT, 102)
C     GO TO 99
C   4 WRITE (OUTPUT, 104)
C     GO TO 99
C   5 WRITE (OUTPUT, 105)
C     GO TO 99
C   6 WRITE (OUTPUT, 106) K
C     GO TO 99
C   7 WRITE (OUTPUT, 107) K
C     GO TO 99
C   8 WRITE (OUTPUT, 108) K
C
   99 RETURN
  101 FORMAT (46H0  PROBLEM TERMINATED FOR EXCESSIVE ITERATIONS //)
  102 FORMAT (49H0  PROBLEM TERMINATED BECAUSE OF ILL-CONDITIONING //)
  104 FORMAT (/ 51H INPUT ERROR IN PARAMETER L, NL, N, LPPS1, S, LMAX,,
     X15H NDIM, OR NMAX. /)
  105 FORMAT (69H0  ERROR -- INC MATRIX IMPROPERLY SPECIFIED, OR DISAGRE
     XES WITH LPPS1. /)
  106 FORMAT (19H0  ERROR -- WEIGHT(, I4, 14H) IS NEGATIVE. /)
  107 FORMAT (28H0  ERROR -- CONSTANT COLUMN , I3, 37H MUST BE COMPUTED
     XONLY WHEN ISEL = 1.  /)
  108 FORMAT (33H0  CATASTROPHIC FAILURE -- COLUMN , I4, 28H IS ZERO, SE
     XE DOCUMENTATION. /)
      END
